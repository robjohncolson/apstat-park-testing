Phase 4.1: Creating the Master Blockchain Service
Goal: To create a single, powerful "service" class that acts as the primary controller for all blockchain operations. This is the most important part of the integration, as it forms the clean API that our React components will use.
Key Actions:
Create the File: Inside apps/web/src/services/, create a new file named BlockchainService.ts.
Add Dependencies: From the project root, ensure that apps/web has local workspace dependencies on @apstatchain/core and @apstatchain/p2p in its package.json.
Implement the BlockchainService Class:
Singleton Pattern: Ensure only one instance of this service can exist.
Constructor:
Initializes an instance of our ChainDB from @apstatchain/core.
Initializes an instance of our P2PNode from @apstatchain/p2p.
Loads the user's private key from the database or generates a new one.
Public State (using a reactive library or simple observables):
syncStatus: 'synced' | 'syncing' | 'disconnected'
peerCount: number
leaderboardData: LeaderboardEntry[]
isProposalRequired: boolean
Public Methods (The API for our UI):
async start(): Starts the P2P node and begins syncing the chain.
async submitLessonProgress(payload: LessonProgressPayload): Creates, signs, and broadcasts a LESSON_PROGRESS transaction.
async proposeNewBlock(puzzleSolution: PuzzleSolution): Orchestrates the block proposal, validation, and broadcasting process.
Internal Logic: The service will contain the "glue logic" that connects all our packages. For example, when the P2PNode receives a new finalized block, it will emit an event. The BlockchainService will listen for this event, add the block to its ChainDB, recalculate the leaderboardData, and update its public state, which will cause the UI to reactively update.
Expected Outcome: A well-defined BlockchainService.ts file. We can verify this with a "smoke test" by instantiating the service in main.tsx and calling its start() method, watching the browser console for logs indicating the P2P node is starting and the database is being initialized.
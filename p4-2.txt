Phase 4.2: Providing Blockchain State to the UI
Goal: To use a React Context to make the state and methods of the BlockchainService available to any component in the application, avoiding "prop drilling."
Key Actions:
Create the File: Inside apps/web/src/context/, create a new file named BlockchainProvider.tsx.
Create the Context: Use React.createContext() to create a BlockchainContext.
Create the Provider Component:
The BlockchainProvider component will be a wrapper that you'll place high up in your component tree (e.g., in App.tsx).
It will hold the single instance of our BlockchainService in a useState or useRef.
It will use a useEffect hook to subscribe to the public state variables of the service. When the service's state changes, the component's state will update, triggering a re-render.
It will pass down the current state (leaderboardData, peerCount, etc.) and the service's public methods (submitLessonProgress, etc.) through the BlockchainContext.Provider's value prop.
Create a Custom Hook: Create a useBlockchain() hook that simply calls useContext(BlockchainContext) for easy consumption by child components.
Expected Outcome: Any component in the app can now get access to live blockchain data by simply calling const { leaderboardData, submitLessonProgress } = useBlockchain();.
